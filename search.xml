<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React Hooks个人理解和总结</title>
      <link href="2020/11/16/React/Hooks/"/>
      <url>2020/11/16/React/Hooks/</url>
      
        <content type="html"><![CDATA[<h1 id="React-Hooks是什么"><a href="#React-Hooks是什么" class="headerlink" title="React Hooks是什么"></a>React Hooks是什么</h1><p>  <em>hooks开始是为了解决逻辑复用，为函数化专门提供的api</em></p><h1 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h1><p>  使用分散加打平的方式将逻辑和状态混入组件中</p><ul><li>命名空间冲突：属性名和方法名很容易和组件中冲突，导致被覆盖</li><li>很难判断多个mixins中属性从哪里来</li><li>需要了解整个mixins才能使用，维护困难</li></ul><h1 id="HOC"><a href="#HOC" class="headerlink" title="HOC"></a>HOC</h1><p>我先给你个组件(dom)，你通过props增强之后返给我</p><ul><li>整个类对于外部来说是不可控的，相当于是一个黑盒。</li><li>ref操作dom被隔断。React.createRef</li><li>因为父组件无法访问子组件的state，导致无法用shouldComponentUpdate进行过滤渲染 React.pureComponent。</li><li>如果多层嵌套需要注意props上的属性覆盖问题</li><li>整体需要嵌套一层类组件<br>网上摘抄的demo<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">const withSecretToLife &#x3D; (WrappedComponent) &#x3D;&gt; &#123;</span><br><span class="line">  class HOC extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;WrappedComponent</span><br><span class="line">          secretToLife&#x3D;&#123;42&#125;</span><br><span class="line">          &#123;...this.props&#125;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return HOC;</span><br><span class="line">&#125;;</span><br><span class="line">export default withSecretToLife;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import withSecretToLife from &#39;components&#x2F;withSecretToLife&#39;;</span><br><span class="line">const DisplayTheSecret &#x3D; props &#x3D;&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    The secret to life is &#123;props.secretToLife&#125;.</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">);</span><br><span class="line">const WrappedComponent &#x3D; withSecretToLife(DisplayTheSecret);</span><br><span class="line">export default WrappedComponent;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Render-props"><a href="#Render-props" class="headerlink" title="Render props"></a>Render props</h1><p>我把dom和state通过render给你，你帮我用你的属性或者方法直接渲染出来<br>render props可以解决除了最后一条所有的问题</p><ul><li>通过render属性自己控制state渲染</li><li>多层嵌套，在一个组件中命名就不会冲突</li><li>区别在于可不可以直接传递dom*<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">const SharedComponent extends React.Component &#123;</span><br><span class="line">  state &#x3D; &#123;...&#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;this.props.render(this.state)&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default SharedComponent;</span><br><span class="line"></span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import SharedComponent from &#39;components&#x2F;SharedComponent&#39;;</span><br><span class="line">const SayHello &#x3D; () &#x3D;&gt; (</span><br><span class="line">  &lt;SharedComponent render&#x3D;&#123;(state) &#x3D;&gt; (</span><br><span class="line">    &lt;span&gt;hello!,&#123;...state&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  )&#125; &#x2F;&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h1 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>解决了hoc和render props需要嵌套一层的问题，(props传递加useRef)</li><li>解决了mixins中状态和方法来源不清和命名的问题(自定义hooks)</li><li>解决了类组件中将逻辑分散到各个生命周期，或者需要释放内存的操作，(useEffect和监听依赖)</li><li>类组件改函数组件，类组件有自己的作用域，会降低性能</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>必须在函数头部进行声明，无法在for循环或者if判断中进行声明</li><li>需要自己指定依赖，就算有eslint-plugin-react-hooks这种类似的插件，也会有警告，包括无效的依赖存在</li></ul><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>  1.定义:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [state, setState] &#x3D; useState(0);</span><br></pre></td></tr></table></figure><br>  2.每次渲染都会具有独立的props和state，不同于类组件需要将state挂载到this上（每次渲染是独立的，属性也是独立的，函数需要重新创建），我们来看两个例子<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 父组件的count每隔一秒加1</span><br><span class="line">handleClick &#x3D; () &#x3D;&gt; &#123; &#x2F;&#x2F; 类组件</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        alert(this.props.count); &#x2F;&#x2F; 三秒结束之后输出最新值3</span><br><span class="line">    &#125;, 3000);</span><br><span class="line">&#125;;</span><br><span class="line">handleClick &#x3D; () &#x3D;&gt; &#123; &#x2F;&#x2F; hooks组件</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        alert(props.count); &#x2F;&#x2F; 三秒结束之后输出初始值0</span><br><span class="line">    &#125;, 3000);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>  由此，我们可以得出结论：hooks组件在每次渲染的时候都有自己的props。<br>  3.我们将上面的props变成state试下<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const Example &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [count,setCount] &#x3D; useState(0);</span><br><span class="line">  handleClick &#x3D; () &#x3D;&gt; &#123; &#x2F;&#x2F; 类组件</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">          alert(count); &#x2F;&#x2F; 三秒结束之后输出三秒之前的count</span><br><span class="line">      &#125;, 3000);</span><br><span class="line">  &#125;;</span><br><span class="line">  handleCountClick &#x3D; () &#x3D;&gt; &#123; &#x2F;&#x2F; 类组件</span><br><span class="line">      setCount(count + 1);</span><br><span class="line">  &#125;;</span><br><span class="line">  return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &lt;p&gt;&#123;count&#125;&lt;&#x2F;p&gt;</span><br><span class="line">          &lt;button onClick&#x3D;&#123;handleCountClick&#125;&gt;</span><br><span class="line">              setCount</span><br><span class="line">          &lt;&#x2F;button&gt;</span><br><span class="line">          &lt;button onClick&#x3D;&#123;handleClick&#125;&gt;</span><br><span class="line">              Delay setCount</span><br><span class="line">          &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  我们先点击下面的Delay setCount，然后再点击上面的setCount，会发现p中的count变成了最新的值，而alert出来的还是初始值0<br>  4.所以在每次render的时候state也有自己的初始值<br>  5.setState和useState的区别：setState会维护一个队列，如果多次setState会合并成一次进行渲染（这里是将新旧值进行合并然后在赋值），useState使用Object.is进行比较，如果值不变就不会重新渲染，如果值不同直接用新替换旧，并且useState不会自动合并更新对象,需要通过setObj({ …obj, {value: obj.value + 1}})这样去合并</p><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p>  1。定义：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;&#125;, [dep]);</span><br></pre></td></tr></table></figure><br>  2.理解：在DOM渲染之后进行一些操作，相当于vue的mounted。<br>  一般进行一些副作用操作，像发请求，对DOM操作，定时器等等，每一次effect之后都会重新render，所以把定时器放在effect里边，重新render之后自动释放，不会造成内存泄露</p><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p>  1.用来缓存元素，比如大量的dom计算，如果state变化就会重新渲染，看下下边的例子：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  const nameList &#x3D; [&#39;apple&#39;, &#39;peer&#39;, &#39;banana&#39;, &#39;lemon&#39;]</span><br><span class="line">  const MemoExample &#x3D; (props: any) &#x3D;&gt; &#123;</span><br><span class="line">    const [price, setPrice] &#x3D; useState(0)</span><br><span class="line">    const [name, setName] &#x3D; useState(&#39;apple&#39;)</span><br><span class="line">    let getProductName &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;getProductName触发&#39;)</span><br><span class="line">        return name</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F; 只对name响应</span><br><span class="line">    useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;name effect 触发&#39;)</span><br><span class="line">    &#125;, [name])</span><br><span class="line">    &#x2F;&#x2F; 只对price响应</span><br><span class="line">    useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;price effect 触发&#39;)</span><br><span class="line">    &#125;, [price])</span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; memo化的getProductName函数   🧬🧬🧬</span><br><span class="line">    const memo_getProductName &#x3D; useMemo(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;name memo 触发&#39;)</span><br><span class="line">        return () &#x3D;&gt; name  &#x2F;&#x2F; 返回一个函数</span><br><span class="line">    &#125;, [name]);</span><br><span class="line">    return (</span><br><span class="line">        &lt;Fragment&gt;</span><br><span class="line">            &lt;p&gt;&#123;name&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;&#123;price&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;普通的name：&#123;getProductName()&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;memo化的：&#123;memo_getProductName ()&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setPrice(price+1)&#125;&gt;价钱+1&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setName(nameList[Math.random() * nameList.length &lt;&lt; 0])&#125;&gt;修改名字&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;Fragment&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">export default MemoExample</span><br></pre></td></tr></table></figure><br>注意:如果只想在name改变的时候重新渲染，需要使用memo做下渲染元素的优化<br>想象以下的场景，现在有多个按钮，每个按钮都共享一个状态count，我们用React.memo缓存每个button，期望点击每个按钮都只渲染一次，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const CountButton &#x3D; React.memo(function CountButton(&#123;onClick, count&#125;) &#123;</span><br><span class="line">  return &lt;button onClick&#x3D;&#123;onClick&#125;&gt;&#123;count&#125;&lt;&#x2F;button&gt;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function DualCounter() &#123;</span><br><span class="line">  const [count1, setCount1] &#x3D; React.useState(0)</span><br><span class="line">  const increment1 &#x3D; () &#x3D;&gt; setCount1(c &#x3D;&gt; c + 1)</span><br><span class="line"></span><br><span class="line">  const [count2, setCount2] &#x3D; React.useState(0)</span><br><span class="line">  const increment2 &#x3D; () &#x3D;&gt; setCount2(c &#x3D;&gt; c + 1)</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;CountButton count&#x3D;&#123;count1&#125; onClick&#x3D;&#123;increment1&#125; &#x2F;&gt;</span><br><span class="line">      &lt;CountButton count&#x3D;&#123;count2&#125; onClick&#x3D;&#123;increment2&#125; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们预想的是在缓存了页面之后CountButton不会重新渲染，但是我们点击之后button的组件依旧会渲染两次，原因是React Hooks每次渲染都是相互独立的，传入的函数因为没有做缓存，每次传入的都是一个新的函数对象，所以才会渲染两次，我们使用useCallback包括函数const increment1 = useCallback() =&gt; setCount1(c =&gt; c + 1), [count1]);最好指定下依赖。<br>2.当我们需要fetchData变化来初始化一个函数时候，需要用useCallback<br>3.用来缓存数据，像上面的函数如果变成对象可以用useMemo缓存，vue中的计算属性也可以用useMemo来缓存，还有像useAsyncMemo这种，不过他需要npm安装 npm install use-async-memo –save<br>还可以加上防抖的逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const [input, setInput] &#x3D; useState()</span><br><span class="line">const [debouncedInput] &#x3D; useDebounce(input, 300)</span><br><span class="line">const users &#x3D; useAsyncMemo(async () &#x3D;&gt; &#123;</span><br><span class="line">  if (debouncedInput &#x3D;&#x3D;&#x3D; &#39;&#39;) return []</span><br><span class="line">  return await apiService.searchUsers(debouncedInput)</span><br><span class="line">&#125;, [debouncedInput], [])</span><br></pre></td></tr></table></figure><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Hexo和githubpages进行博客系统建站</title>
      <link href="2020/11/06/Hexo/1/"/>
      <url>2020/11/06/Hexo/1/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建网站"><a href="#搭建网站" class="headerlink" title="搭建网站"></a>搭建网站</h1><h2 id="源动力"><a href="#源动力" class="headerlink" title="源动力"></a>源动力</h2><p>一直以来都想自己写一些自己的东西，原来尝试过用印象笔记去共享一些经验和总结，但后来觉得笔记适用于提醒和任务，所以打算建一个博客来分享一些开发经验和解决问题的思路，最近在网上找了些教程去试验了下，发现还是有不少坑的，在这里总结一手，希望大家能顺利建起自己的博客。</p><h2 id="开始行动"><a href="#开始行动" class="headerlink" title="开始行动"></a>开始行动</h2><p><strong>基本的安装步骤我会一笔带过，重点说下我遇到过的问题和解决方法</strong></p><a href="#">Post not found: React/1</a><h3 id="一-搭建基本架构上传githubpages，并在githubpages上访问"><a href="#一-搭建基本架构上传githubpages，并在githubpages上访问" class="headerlink" title="一.搭建基本架构上传githubpages，并在githubpages上访问"></a>一.搭建基本架构上传githubpages，并在githubpages上访问</h3><ul><li>安装node</li><li>安装git</li><li>安装hexo(npm install -g hexo-cli)</li><li>构建常用命令:<pre><code>    *hexo init folder(创建一个hexo的博客项目)    *hexo g(生成静态文件,这里指的是本地的public文件夹)    *hexo s(开启本地服务，在浏览器中访问，默认端口为4000)    *hexo d(将生成的静态文件上传至githubpages上)    *hexo s -g --debug(在本地开启服务，并进行热更新)    *hexo clean(将public文件和临时的db.json文件全部清除)</code></pre><font color=#A52A2A size=3 >这里注意hexo clean 会删除db.json会包含评论数据，所以尽量不要删除</font></li></ul><p>首先我们执行hexo init testFolder创建项目，之后cd testFolder，然后npm install安装包，执行hexo s运行本地服务，访问 <a href="http://localhost:4000/">http://localhost:4000</a> 默认是4000端口，当然你可以自己按照文档指定去修改，效果是这样的:<br><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/07/YQtDEsaUPSolueI.jpg" alt="origin-blog.png"><br>那么恭喜你，第一步已经完成了</p><p>接下来，我们登录<a href="https://github.com/">github</a><br>点击左上角绿色的new去新建一个分支，<font color=#A52A2A size=3 >注意在new分支的时候你的分支名字要起成  用户名.github.io就像这样</font><br><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/11/jHnzqtfJsO2S8Pw.jpg" alt="branch.png"><br>接下来安装hexo-deployer-git(npm install hexo-deployer-git –save)，修改我们本地的_config.yml文件，deploy属性:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;用户名&#x2F;用户名.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><br>之后在本地执行hexo d，然后访问用户名.github.io就可以在github上看到你的博客了。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>  我们已经将本地代码上传到了master分支了，但我们需要一个分支来存储我们的本地代码，在github上新建一个develop分支，从master克隆就好，然后用我们的本地代码替换掉develop分支上的代码，执行git add, git commit, git push进行提交，这样就可以在公司或者家里写博客了。</p><h1 id="主题安装配置"><a href="#主题安装配置" class="headerlink" title="主题安装配置"></a>主题安装配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>推荐用git去安装，因为用npm安装的没法自定义一些样式，还有引入一些文件，在博客根目录运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure><p>  并且在_config.yml中指定主题：theme: butterfly<br>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>主题就更换完毕了。</p><h2 id="优化和自定义主题"><a href="#优化和自定义主题" class="headerlink" title="优化和自定义主题"></a>优化和自定义主题</h2><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><p>   title:文章标题<br>   cover:文章缩略图<br>   top_img:顶部头图<br>   keywords:关键词<br>   updated:文章更新时间<br>一般我就用这些，如果喜欢可以再加别的属性</p><h3 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h3><ol><li>因为butterfly的banner和背景是分开的，如果你想像我这样做成一张图的效果可以这样：<br>在_config.butterfaly.yml中找到background ，然后修改你想要的图片：url(图片地址)，注意，(一定是https协议的,http不会显示)，修改index_img(banner图)也为一样的图片</li><li>配置中文：在_config.yml中配置 language: zh-CN</li><li>打字效果配置subtitle的enable为true，这里注意他会先显示source中的名句，然后在显示sub中的语句</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/06/hello-world/"/>
      <url>2020/11/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React+Antd弹框中表单数据不更新</title>
      <link href="2020/11/05/React/antd/"/>
      <url>2020/11/05/React/antd/</url>
      
        <content type="html"><![CDATA[<h2 id="React与antd"><a href="#React与antd" class="headerlink" title="React与antd"></a>React与antd</h2><h3 id="遇到的问题：列表上查看详情弹框如果是表单，数据不更新"><a href="#遇到的问题：列表上查看详情弹框如果是表单，数据不更新" class="headerlink" title="遇到的问题：列表上查看详情弹框如果是表单，数据不更新"></a>遇到的问题：列表上查看详情弹框如果是表单，数据不更新</h3><hr><p>  <strong><em>从来新公司，React已经用了有两三个月，接下来一段时间我将分享我的一些想法和遇到的坑。其实React坑还是挺多的，自己也会去尝试摸索，咱们直接来看我遇到的第一个问题</em></strong></p><p>我想要实现如下的效果:<br><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/02/nwkLyFDTad6ZhC9.jpg" alt="EC3D5932-C47C-467B-9F25-42509F3B39FF.png">  <img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/02/YB9f2Cm5XTK3rgi.jpg" alt="A871DFA1-FECC-4898-8D77-61BE1A698517.png"></p><p>贴一下重点的代码：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const &#123; data &#125; &#x3D; props;</span><br><span class="line">const [form] &#x3D; Form.useForm();</span><br><span class="line">const initFormValues &#x3D; &#123; price: data.price, curentName: data.curentName &#125;;</span><br><span class="line">form.resetFields();</span><br></pre></td></tr></table></figure><br>我想用resetFields去把表单重置成传入的值，但是这个时候我发现，如果你点击按钮弹框的两个值只会是第一次点按钮的值（比如我点第一个永远是胡彦斌和12），点击后两个查看详情值根本不会变，如果不使用表单确实每次的值都会变化就像这样</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/02/XQ6tTh4bJCgoxFj.jpg" alt="chage-input.png"></p><p>但每次表单校验就没有了，感觉好难受</p><h3 id="解决方案-使用useEffect只要弹框就进行更新"><a href="#解决方案-使用useEffect只要弹框就进行更新" class="headerlink" title="解决方案:使用useEffect只要弹框就进行更新"></a>解决方案:使用useEffect只要弹框就进行更新</h3><p>直接上代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">        if(data.visible) &#123;</span><br><span class="line">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                form.resetFields();</span><br><span class="line">            &#125;,0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[data]);</span><br></pre></td></tr></table></figure><p>如果弹框的依赖数据发生变化，当然这里主要是传入的props数据变化，那么就在开一个宏任务进行resetFields，这里其实有些奇怪，我在公司不用加setTimeout也可以成功，还得再看下<br>如果不加data.visible会出现form找不到的警告。</p><h3 id="反思-其实是一开始执行form-resetFields的时候还没有渲染表单，只有当data-visible为true（弹框出来）的时候才会进行渲染，使用宏任务去保证表单渲染时机会更好"><a href="#反思-其实是一开始执行form-resetFields的时候还没有渲染表单，只有当data-visible为true（弹框出来）的时候才会进行渲染，使用宏任务去保证表单渲染时机会更好" class="headerlink" title="反思:其实是一开始执行form.resetFields的时候还没有渲染表单，只有当data.visible为true（弹框出来）的时候才会进行渲染，使用宏任务去保证表单渲染时机会更好"></a>反思:其实是一开始执行form.resetFields的时候还没有渲染表单，只有当data.visible为true（弹框出来）的时候才会进行渲染，使用宏任务去保证表单渲染时机会更好</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
